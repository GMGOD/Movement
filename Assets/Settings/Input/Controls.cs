//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.1
//     from Assets/Settings/Input/Playercontrols.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
        ""name"": ""Playercontrols"",
        ""maps"": [
            {
                ""name"": ""Player"",
                ""id"": ""47b95e70-b9cb-465e-8b86-975c87e921ec"",
                ""actions"": [
                    {
                        ""name"": ""MouseLook"",
                        ""type"": ""PassThrough"",
                        ""id"": ""d179a01b-03d2-4d86-9175-1ab9f0fb487b"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""Movement"",
                        ""type"": ""PassThrough"",
                        ""id"": ""c09ba445-0607-430b-b2b8-c8c071c74a9b"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""Jump"",
                        ""type"": ""Button"",
                        ""id"": ""3ca556c4-4bf4-42d6-bea1-b14b6be1d8e5"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    }
                ],
                ""bindings"": [
                    {
                        ""name"": """",
                        ""id"": ""b011c500-b70e-43e5-b99d-31c74eb78eec"",
                        ""path"": ""<Mouse>/delta"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""MouseLook"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""WASD"",
                        ""id"": ""81208600-03dd-4e51-b5a4-ccca1e3369d2"",
                        ""path"": ""2DVector"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""up"",
                        ""id"": ""1f6b013b-fa32-4e05-8115-59a6867232a4"",
                        ""path"": ""<Keyboard>/w"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""down"",
                        ""id"": ""b3032b35-7f64-4431-87a9-664d65b90473"",
                        ""path"": ""<Keyboard>/s"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""left"",
                        ""id"": ""44121e2c-6509-40fe-ad32-9572f2a5385f"",
                        ""path"": ""<Keyboard>/a"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""right"",
                        ""id"": ""d9cd7637-eb37-49f1-af3a-b66f22029387"",
                        ""path"": ""<Keyboard>/d"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": """",
                        ""id"": ""1eda67a5-b335-414b-9a88-e838d447050a"",
                        ""path"": ""<Keyboard>/space"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    }
                ]
            }
        ],
        ""controlSchemes"": []
        }");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_MouseLook = m_Player.FindAction("MouseLook", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_MouseLook;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseLook => m_Wrapper.m_Player_MouseLook;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @MouseLook.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMouseLook;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMouseLook(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
